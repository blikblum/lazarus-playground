<?xml version="1.0" encoding="UTF-8"?>
<fpdoc-descriptions>
  <package name="TAChartLazarusPkg">
    <module name="TAGraph">
      <element name="TChart.Title">
        <short>Chart title.</short>
      </element>
      <element name="TChart.AllowZoom">
        <short>If <var>true</var>, the user can zoom chart with the mouse.</short>
        <descr>Allow the user to zoom the chart by drawing a new zoom rectangle with the mouse while holding left mouse button.</descr>
      </element>
      <element name="TChart">
        <short>Main charting component.</short>
        <descr><p>The chart is composed of list of <link id="TBasicChartSeries">series</link> and fixed <link id="TATypes.TChartElement">elements</link> like legend, axes and footers.</p><p>Chart methods work with four coordinate systems:</p><ul><li><b>Axis coordinates</b> (known in some other applications as object coordinates) -- they are "raw" coordinate values obtained from the data. As the name implies, axis coordinates are interpreted in terms of specific axis -- the same coordinate value may have different meaning depending on the axis it is applied to.</li><li><b>Graph coordinates</b> are converted from the axis coordinates by means of axis transformations, such as logarithmic scale. Graph coordinates are common to all objects in the chart. Consider the graph coordinates as an invisible graphing paper behind the chart; its x axis is horizontal running from left to right, and its y axis is vertical running from bottom to top even if a series is rotated.</li><li><b>Image coordinates</b> (aka screen coordinates) are converted from graph coordinates based on the chart viewport. This transformation is always linear and can be influenced by chart tools such as zooming and panning.</li><li><b>Device coordinates</b> are usually equal to screen coordinates, but may be adjusted to the drawing back-end to accommodate different physical resolutions (DPI values). See, for example, printer drawer.</li>
          </ul>
        </descr>
      </element>
      <element name="TChart.BackColor">
        <short>Color of back plane of the chart.</short>
        <descr>Note that <var>BackColor</var> is different form the <link id="TChart.Color">Color</link> property
which is used to paint the background of all <var>TChart</var>, including legend, axises and title.</descr>
        <seealso>
          <link id="TChart.Color">Color</link>
        </seealso>
      </element>
      <element name="TChart.Depth">
        <short>The length of Z axis in 3D mode, in pixels. Zero value means 2D mode.</short>
      </element>
      <element name="TChart.ExpandPercentage">
        <short>Default extent size is increased by this percent. May be negative.</short>
        <descr>
          <p>To ensure full visualization of the extreme points of the chart, it is usually a good idea to set the default zoom value so that the default extent is slightly greater than the extent of chart data.</p>
          <p>This can be done by either setting the <var>ExpandPercentage</var> property, which increases the extent value relatively, setting the <link id="TChart.Extent">extent</link>manually, or setting absolute <link id="TChart.Margins">margins</link>.</p>
        </descr>
        <seealso>
          <link id=""/>
          <link id=""/>
        </seealso>
      </element>
      <element name="TChart.Series">
        <short>The list of chart series.</short>
        <descr>
          <p>To add or remove series at run-time,
use 
<link id="TChart.AddSeries">AddSeries</link> and 
<link id="TChart.DeleteSeries">DeleteSeries</link> methods.
</p>
          <p>Use <link id="TChartSeriesCount">SeriesCount</link> to determine the number of series contained in the chart.</p>
        </descr>
        <seealso>
          <link id=""/>
          <link id=""/>
          <link id=""/>
        </seealso>
      </element>
      <element name="TChart.SeriesCount">
        <short>Returns the number of chart series, including inactive ones.</short>
      </element>
      <element name="TChart.Foot">
        <short>Chart footer.</short>
      </element>
      <element name="TChart.Frame">
        <short>The pen to draw a frame around the chart's viewport.</short>
        <descr>
          <p>The position of the frame is coincient with the default axis position. </p>
          <p>Set <var>Frame.Visible</var> to <var>false</var> to turn off frame drawing.
</p>
        </descr>
      </element>
      <element name="TChart.AxisList">
        <short>List of graph <link id="TATypes.TChartAxis">axises</link>.</short>
      </element>
      <element name="TChart.BottomAxis">
        <short>Bottom axis of the chart.</short>
        <descr>Retrieves the first axis from the 
<link id="TChart.AxisList">AxisList</link> with

<link id="TATypes.TChartAxis.Alignment">Alignment</link> set to

<link id="TATypes.TChartAxisAlignment">calBottom</link>.</descr>
        <seealso>
          <link id=""/>
          <link id=""/>
        </seealso>
      </element>
      <element name="TChart.LeftAxis">
        <short>Left axis of the chart.</short>
        <descr>Retrieves first axis from the <link id="TChart.AxisList">AxisList</link> with
<link id="TATypes.TChartAxis.Alignment">Alignment</link> set to
<link id="TATypes.TChartAxisAlignment">calLeft</link>.</descr>
        <seealso>
          <link id="TChart.AxisList">AxisList</link>
          <link id="TATypes.TChartAxis.Alignment">TChartAxis.Alignment</link>
        </seealso>
      </element>
      <element name="TChart.Legend">
        <short>Chart legend.</short>
      </element>
      <element name="TChart.Margins">
        <short>Margins around the chart sides in default extent, in pixels.</short>
        <seealso>
          <link id="TChart.BorderSpacing">BorderSpacing</link>
          <link id="TChart.ExpandPercentage">ExpandPercentage</link>
          <link id="TChart.Extent">Extent</link>
        </seealso>
        <descr>Note that the margins set by this property have effect only on the default extent.
Use <link id="TChart.BorderSpacing">BorderSpacing</link> property to set margins
independently of zoom level.</descr>
      </element>
      <element name="TChart.Extent">
        <short>Manual overrides for the chart extent borders.</short>
        <descr>
          <p>The <var>Extent</var> defines the unzoomed viewport of the chart.</p>
          <p>Values entered here override any other automatic extent calculation.</p>
        </descr>
      </element>
      <element name="TBasicChartSeries">
        <short>The basic chart series class. Do not inherit or instantiate directly.</short>
      </element>
      <element name="TBasicChartSeries.Draw">
        <short>Draw the series using the specified drawer</short>
      </element>
      <element name="TBasicChartSeries.IsEmpty">
        <short>Return <var>true</var> if the series contains no data.</short>
      </element>
      <element name="TBasicChartSeries.Active">
        <short>If <var>true</var>, this series is visible and taken into account in extent calculation.</short>
      </element>
      <element name="TBasicChartSeries.Depth">
        <short>The extent of the series along Z axis, in pixels. Zero for 2D series.</short>
        <seealso>
          <link id="TBasicChartSeries.ZPosition">ZPosition</link>
          <link id="TChart.Depth">TChart.Depth</link>
        </seealso>
      </element>
      <element name="TBasicChartSeries.ParentChart">
        <short>The chart owning this series</short>
      </element>
      <element name="TBasicChartSeries.ShowInLegend">
        <short>If <var>true</var>, this series is displayed in the legend.</short>
      </element>
      <element name="TBasicChartSeries.Title">
        <short>Series title to show in legend.</short>
      </element>
      <element name="TBasicChartSeries.ZPosition">
        <short>Offset of the series along Z-axis, in pixels. Also determines series drawing order.</short>
        <descr>
          <p>The series are drawn in order of decreasing <var>ZPosition</var> value.</p>
          <p>So to bring series on 2D chart to front, set it's <var>ZPosition</var> to 0.</p>
        </descr>
        <seealso>
          <link id="TBasicChartSeries.Depth">Depth</link>
          <link id="TChart.Depth">TChart.Depth</link>
        </seealso>
      </element>
      <element name="TChartSeriesList">
        <short>The list of chart series.</short>
      </element>
      <element name="TChartSeriesList.Items">
        <short>Retrieve char series by index.</short>
      </element>
      <element name="TBasicChartSeries.AfterAdd">
        <short>Called after the series was added to a chart.</short>
        <seealso>
          <link id="TChart.AddSeries">TChart.AddSeries</link>
        </seealso>
      </element>
      <element name="TBasicChartSeries.AfterDraw">
        <short>Called after the series is drawn.</short>
      </element>
      <element name="TBasicChartSeries.BeforeDraw">
        <short>Called before the series is drawn.</short>
      </element>
      <element name="TBasicChartSeries.GetLegendItems">
        <short>Get the list of legend items for this series.</short>
        <descr>Note that the series may return several items.
For example, <link id="TASeries.TPieSeries">pie series</link> displays a separate legend item for each pie slice.</descr>
      </element>
      <element name="TBasicChartSeries.UpdateBounds">
        <short>Update the default chart extent according to this series data.</short>
      </element>
      <element name="TBasicChartSeries.UpdateMargins">
        <short>Update chart margins according to this series data.</short>
        <descr>In particular, margins are used to make room for labels.</descr>
      </element>
      <element name="TChart.AddSeries">
        <short>Adds the specified series to the chart.</short>
        <descr>Note that the series can only belong to a single chart.
</descr>
      </element>
      <element name="TChart.ClearSeries">
        <short>Removes all series from the chart.</short>
        <descr>Note that the series are <b>not </b>destroyed.
</descr>
      </element>
      <element name="TChart.DeleteSeries">
        <short>Deletes the specified series from the chart.</short>
        <descr>Note that the series is <b>not</b> destroyed.
</descr>
        <seealso><link id=""/>
        </seealso>
      </element>
      <element name="TChart.PaintOnCanvas">
        <short>Draw the chart on a given canvas.</short>
        <descr>
          <p>The canvas passed to this method not necessarily is that of the screen. It can be the canvas provided by some other drawing device, such as a bitmap or the printer.</p>
          <p>Note, however, that this method is out-dated; the recommended method of drawing is by calling the method <var>Draw</var> which allows painting also on devices which do not have a canvas.</p>
        </descr>
        <seealso>
          <link id=""/>
        </seealso>
      </element>
      <element name="TChart.ZoomFull">
        <short>Restore the default zoom level.</short>
      <seealso><link id="#TAChartLazarusPkg.tagraph">GetFullExtent</link>
        </seealso>
      </element>
      <element name="TChart.SaveToImage">
        <short>Returns a raster image of the given type with the screenshot of the chart.</short>
        <descr>The image must be freed by calling code.</descr>
        <seealso>
          <link id=""/>
        </seealso>
      </element>
      <element name="TChart.SaveToFile">
        <short>Saves chart screenshot to a file as a raster image of the given type.</short>
        <seealso>
          <link id=""/>
          <link id=""/>
        </seealso>
      </element>
      <element name="TChart.SaveToBitmapFile">
        <short>Save chart screenshot to a file as a bitmap image.</short>
        <descr>Deprecated. Use SaveToFile(TBitmap, fileName) instead.</descr>
        <seealso>
          <link id="TChart.SaveToFile">SaveToFile</link>
        </seealso>
      </element>
      <element name="TBasicChartSeries.GetNearestPoint">
        <short>Get the series point nearest to <var>APoint</var> as measured by <var>ADistFunc</var>.</short>
        <descr>Return <var>true</var> if such a point exists.</descr>
      </element>
      <element name="TChart.GraphToImage">
        <short>Converts a point from graph coordinates to image coordinates.</short>
      </element>
      <element name="TChart.ImageToGraph">
        <short>Converts a point from image coordinates to graph coordinates.</short>
        <seealso><link id=""/>
        </seealso>
      </element>
      <element name="TChart.XGraphToImage">
        <short>Converts the X coordinate of a point from graph coordinates to image coordinates.</short>
        <seealso><link id=""/>
        </seealso>
      </element>
      <element name="TChart.YGraphToImage">
        <short>Converts the Y coordinate of a point from graph units to image units.</short>
        <seealso><link id=""/>
        </seealso>
      </element>
      <element name="TChart.XImageToGraph">
        <short>Converts the X coordinate of a point from image coordinates to graph coordinates.</short>
        <seealso><link id=""/>
        </seealso>
      </element>
      <element name="TChart.YImageToGraph">
        <short>Converts the Y coordinate of a point from image units to graph units.</short>
        <seealso><link id=""/>
        </seealso>
      </element>
      <element name="TChart.CurrentExtent">
        <short>Returns the chart extent at the current zoom level.</short>
        <descr>The extent is the visible viewport of the chart. It is given in graph coordinates.
In addition to the viewport requested for zooming it also contains the inner
chart margin and the space reserved for series marks.
</descr>
        <seealso><link id="TChart.LogicalExtent">LogicalExtent</link>
        </seealso>
      </element>
      <element name="TChart.XGraphMax">
        <short>Returns the maximum x value of the chart in graph units</short>
        <descr>Deprecated, use 
<link id="TChart.CurrentExtent">CurrentExtent</link> instead.
</descr>
      </element>
      <element name="TChart.XGraphMin">
        <short>Returns the minimum x value of the chart in graph coordinates</short>
        <descr>Deprecated, use 

<link id="TChart.CurrentExtent">CurrentExtent</link> instead.</descr>
      </element>
      <element name="TChart.YGraphMax">
        <short>Returns the maximum y value of the chart, in graph coordinates</short>
        <descr>Deprecated, use <link id="TChart.CurrentExtent">CurrentExtent</link> instead.</descr>
        <seealso>
          <link id=""/>
        </seealso>
      </element>
      <element name="TChart.YGraphMin">
        <short>Returns the minimum y value of the chart in graph coordinates</short>
        <descr>Deprecated, use <link id="TChart.CurrentExtent">CurrentExtent</link> instead.</descr>
        <seealso>
          <link id=""/>
        </seealso>
      </element>
      <element name="TChart.CopyToClipboardBitmap">
        <short>Copies a bitmap screenshot of the chart to the clipboard.</short>
        <seealso><link id=""/>
        </seealso>
      </element>
      <element name="Register" skip="1"/>
      <element name="RegisterSeriesClass" skip="1"/>
      <element name="TChart.EraseBackground" skip="1"/>
      <element name="TChart.GetChildren" skip="1"/>
      <element name="TChart.Paint" skip="1"/>
      <element name="TChart.SetChildOrder" skip="1"/>
      <element name="TChart.AllowPanning">
        <short>If <var>true</var>, the user can drag the visible viewport of the chart with the mouse.</short>
        <descr>Allows the user to pan the chart by dragging the visible vieport with the right mouse button.</descr>
      </element>
      <element name="TChart.PaintOnCanvas.Draw"/>
      <element name="TChart.Draw">
        <short>Draws the chart usung the given drawing back-end</short>
        <descr>This method draws the chart by means of the given drawing back-end, 
<var>Drawer</var>. Unlike 
<var>PaintOnCanvas</var> the chart can be drawn on non-canvas devices, such as a svg file.
</descr>
        <seealso><link id=""/>
        </seealso>
      </element>
    <element name="TChart.Create"><short>Creates the chart</short>
      </element><element name="TChart.Destroy"><short>Destroys the chart</short>
      </element><element name="TChart.IsPointInViewPort"><short>Returns <var>true</var> when the given point (in graph coordinates) is inside or at the boundaries of the chart's viewport (area spanned by the axes)</short>
      </element><element name="TChart.Clone"><short>Creates a new chart and copies all properties of the current chart to it.</short>
      </element><element name="TChart.DisableRedrawing"><short>Disables redrawing of the chart</short><descr><p>Useful when many data points are added.</p><p>Must be accompanied by <var>EnableRedrawing</var>, otherwise the chart will
not be updated any more.</p>
        </descr>
      </element><element name="TChart.DrawLegendOn"><short>Draws the legend on the specified canvas in the given rectangle</short><descr>Useful to paint the legend outside the chart control.
</descr>
      </element><element name="TChart.EnableRedrawing"><short>Enables redrawing of the chart</short><descr>Must be called after redrawing of the chart has been deactivated by calling
DisableRedrawing. Otherwise the chart will not be updated any more.
</descr>
      </element><element name="TChart.GetFullExtent"><short>Returns the full extent of the chart</short><descr>The full extent is the unzoomed viewport of the chart. This is usually determined
automatically as the area encompassing all the data from series and axis ranges.
</descr>
      </element><element name="TChart.Prepare"><short>Initializes extents and transformations before the chart is drawn.</short><descr>This method normally is executed automatically. It must be called explicitly, however,
when the chart's extent is needed before the chart has been painted, e.g. in the
form's OnCreate event.
</descr>
      </element><element name="TChart.RemoveSeries"><short>Removes the specified series from the chart</short><descr>Note that the series is <b>not</b> destroyed.
</descr>
      </element><element name="TChart.UsesBuiltinToolset"><short>Returns <var>true</var> when the built-in toolset is active.</short><descr>The built-in toolset is responsible for the default zooming and panning capabilities of the chart.
When a separate <var>TChartToolset</var> is added in order to get more control over these
processed or to use other tools the built-in toolset is de-activated and this function returns <var>false</var>.
</descr>
      </element><element name="TChart.StyleChanged"><short>Part of the notification chain</short><descr>When any property of any chart element is changed the method <var>StyleChanged</var>
is called. It typically requests a repaint of the chart and notifies other elements
of the changes.
</descr>
      </element><element name="TChart.IsZoomed"><short>Returns <var>true</var> when the chart is zoomed.</short>
      </element><element name="TChart.LogicalExtent"><short>Returns the extent of the viewport requested by the user</short><descr>The <var>LogicalExtent</var> does not contain the the inner margins and the
space reserved for the series labels. It is given in graph coordinates.
</descr><seealso><link id="TChart.CurrentExtent">CurrentExtent</link>
        </seealso>
      </element><element name="TChart.MinDataSpace"><short>Defines the minimum height of the <var>LogicalExtent</var>
        </short><descr>When series labels are displayed and <var>AutoMarks</var> is <var>true</var> then space is reserved
for the labels and is no longer available for plotting. The <var>MinDataSpace</var> avoids
that the series can completely disappear when very long or very high labels are
displayed.
</descr>
      </element>
    </module>
  </package>
</fpdoc-descriptions>
